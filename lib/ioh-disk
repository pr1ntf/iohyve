#!/bin/sh

# Add a new disk to guest
__add() {
	if [ -z $2 ] || [ -z $3 ]; then
		printf "usage:\n\tiohyve $1 <name> <size> [pool]\n"
		return 1
	fi
	local name="$2"
	local size="$3"
	local pool="$(zfs list -H -t volume | grep $name | cut -d '/' -f 1 | head -n1)"
	# optionally allow the pool for the new disk to be specified. If not set, its set to $pool
	local newpool="${4-$pool}"
	# Find the last disk number and increment one
	local lastdisk="$(zfs list -H | grep $name | grep disk | cut -d '/' -f4 | cut -f1 | \
		sort -V | cut -c5- | tail -n1)"
	local newdisk="$(expr $lastdisk + 1)"
	printf "creating zvol of size $size for $name: "
	zfs create $newpool/iohyve/$name 2> /dev/null
	zfs create -V $size -o volmode=dev $newpool/iohyve/$name/disk$newdisk
	# Find the last pcidev and increment by one
	local lastpci="$(zfs get -H all | grep iohyve/$name | grep pcidev | cut -f2 | \
		cut -d ':' -f3 | sort -V | tail -n1)"
	if [ -z $lastpci ]; then
		local newpci='1'
	else
		local newpci="$(expr $lastpci + 1)"
	fi
	zfs set iohyve:pcidev:$newpci=ahci-hd,/dev/zvol/$newpool/iohyve/$name/disk$newdisk $pool/iohyve/$name
	printf "done\n"
}

# Remove disk from guest
__remove() {
	local flagone="$2"
	local flagtwo="$3"
	local flagthree="$4"
	if [ $flagone = "-f" ]; then
		if [ -z $flagtwo ] || [ -z $flagthree ]; then
			printf "usage:\n\tiohyve $1 [-f] <name> <diskN>\n"
			return
		fi
		local pool="$(zfs list -H -o name | grep $flagtwo | grep $flagthree | cut -d '/' -f 1)"
		if ! zfs list -H -o name $pool/iohyve/$flagtwo/$flagthree > /dev/null 2>&1; then
			echo "cannot remove disk '$flagthree' from '$flagtwo': disk does not exist"
			return
		fi
		printf "removing $flagthree from $flagtwo: "
		local pciprop="$(zfs get -H all $pool/iohyve/$flagtwo | grep pcidev | grep $flagthree | cut -f2 )"
		# Make sure it's a valid pcidev property as to not shoot foot
		if [ -z $pciprop ]; then
			printf "failed: unvalid PCIDEV property '$pciprop'\n"
		else
			zfs inherit  -r $pciprop $pool/iohyve/$flagtwo
			zfs destroy $pool/iohyve/$flagtwo/$flagthree
			printf "done\n"
		fi
	else
		if [ -z $flagone ] || [ -z $flagtwo ]; then
			printf "usage:\n\tiohyve $1 [-f] <name> <diskN>\n"
			return
		fi
		local pool="$(zfs list -H -o name | grep $flagone | grep $flagtwo | cut -d '/' -f 1)"
		if ! zfs list -H -o name $pool/iohyve/$flagone/$flagtwo > /dev/null 2>&1; then
			echo "cannot remove disk '$flagtwo' from '$flagone': disk does not exist"
			return
		fi
		local pciprop="$(zfs get -H all $pool/iohyve/$flagone | grep pcidev | grep $flagtwo | cut -f2 )"
		# Make sure it's a valid pcidev property as to not shoot foot
		if [ -z $pciprop ]; then
			echo "cannot remove guest: unvalid PCIDEV property '$pciprop'"
		else
			read -p "Are you sure you want to remove $flagtwo from $flagone [y/N]? " an </dev/tty
			case "$an" in
				y|Y)	printf "removing $flagtwo from $flagone: "
					zfs inherit  -r $pciprop $pool/iohyve/$flagone
					zfs destroy $pool/iohyve/$flagone/$flagtwo
					printf "done\n"
				;;
				*) echo "did not remove: user canceled removal"
				;;
			esac
		fi
	fi
}

# Resize a disk
__resize(){
	if [ -z $2 ] || [ -z $3 ] || [ -z $4 ]; then
		printf "usage:\n\tiohyve $1 <name> <diskN> <newsize>\n"
		return 1
	fi
	local name="$2"
	local disk="$3"
	local size="$4"
	local pool="$(zfs list -H -o name | grep $name | grep $disk | cut -d '/' -f 1)"
	if ! zfs list -H -o name $pool/iohyve/$name/$disk > /dev/null 2>&1; then
		echo "cannot resize disk '$name/$disk': disk does not exist"
		return
	fi
	# Check if guest exists
	if [ -d /iohyve/$pool/$name ] || [ -d /iohyve/$name ]; then
		# Check to make sure guest isn't running
		local running=$(pgrep -fx "bhyve: ioh-$name")
		if [ -z $running ]; then
			local prev="$(zfs get -H -o value volsize $pool/iohyve/$name/$disk)"
			zfs set volsize=$size $pool/iohyve/$name/$disk
			zfs set iohyve:size=$size $pool/iohyve/$name
			echo "$name.$disk: $prev -> $size"
		else
			echo "cannot resize disk: guest is running"
		fi
	else
		echo "cannot resize disk: guest does not exist"
	fi
}

# List disks for a guest
__disks() {
	local name="$2"
	local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
	if [ -z $name ]; then
		printf "usage:\n\tiohyve $1 <name>\n"
	elif [ -d /iohyve/$pool/$name ] || [ -d /iohyve/$name ]; then
		(
		printf "DISK\tSIZE\n"
		zfs list -H -o name,volsize | grep -E "iohyve.*$name.*disk" | \
			cut -d '/' -f4
		) | column -t
	else
		echo "Not a valid guest name"
	fi
}



#!/bin/sh


# List Guests
__list() {
	local pools="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | uniq )"
	(
	printf "%s^%s^%s^%s^%s\n" "GUEST" "VMM" "RUNNING" "RCBOOT" "DESCRIPTION"
	for pool in $pools; do
	local guests="$(zfs list -H | grep -i ^$pool/iohyve | grep -Ev "disk|ISO|Firmware" | cut -f1 | cut -d'/' -f3 | sed 1d | uniq)"
		for g in $guests; do
			local vmm="/dev/vmm/ioh-$g"
			if [ -e $vmm ]; then
				vmm="YES"
			else
				vmm="NO"
			fi
			local running=$(pgrep -fx "bhyve: ioh-$g")
			if [ -z $running ]; then
				running="NO"
			else
				running="YES"
			fi
			local boot="$(zfs get -H -o value iohyve:boot $pool/iohyve/$g)"
			if [ $boot = '1' ]; then
				boot="YES"
			else
				boot="NO"
			fi
		local description="$(zfs get -H -o value iohyve:description $pool/iohyve/$g)"
		printf "%s^%s^%s^%s^%s\n" "$g" "$vmm" "$running" "$boot" "$description"
		done
	done
	) | column -ts^
}


# Display info about all guests.
__info() {
	dflag="$2"
	local pool="$(zfs list -H -t volume | grep iohyve | grep disk0 | cut -d '/' -f 1 | head -n1)"
	local guests="$(zfs list -H | grep -i ^$pool/iohyve | grep -Ev "disk|ISO|Firmware" | cut -f1 | cut -d'/' -f3 | sed 1d | uniq)"
	if [ -z $dflag ]; then
		(
		printf 'NAME\tSIZE\tRAM\tCPU\tOS\tLOADER\n'
		for guest in $guests; do
			local guestattr="$(zfs list -H -o volsize,iohyve:ram,iohyve:cpu,iohyve:os,iohyve:loader $pool/iohyve/$guest)"
			printf "%s\t%s\n" "$guest" "$guestattr"
			local disks="$(zfs list -r -H -o name $pool/iohyve/$guest | grep disk)"

			local diskname=""
			local diskattr=""
			for disk in $disks; do
				if [ ! -z "$diskname" ]; then
					printf '+--%s\t%s\n' "$diskname" "$diskattr"
				fi
				diskname="$(echo $disk | grep -o '[^/]*$')"
				diskattr="$(zfs list -H -o volsize $disk)"
			done
			printf '\\--%s\t%s\n' "$diskname" "$diskattr"
		done
		) | column -t
	elif [ $dflag = "-d" ]; then
		(
		printf 'NAME^SIZE^RAM^CPU^OS^LOADER^DESCRIPTION\n'
		for guest in $guests; do
			local guestattr="$(zfs list -H -o volsize,iohyve:ram,iohyve:cpu,iohyve:os,iohyve:loader $pool/iohyve/$guest | tr '\t' '^')"
			local guestdesc="$(zfs list -H -o  iohyve:description $pool/iohyve/$guest)"
			printf "%s^%s^%s\n" "$guest" "$guestattr" "$guestdesc"
			local disks="$(zfs list -r -H -o name $pool/iohyve/$guest | grep disk)"

			local diskname=""
			local diskattr=""
			for disk in $disks; do
				if [ ! -z "$diskname" ]; then
					printf '+--%s^%s\n' "$diskname" "$diskattr"
				fi
				diskname="$(echo $disk | grep -o '[^/]*$')"
				diskattr="$(zfs list -H -o volsize $disk)"
			done
			printf '\\--%s^%s\n' "$diskname" "$diskattr"
		done
		) | column -ts^
	else
		printf "usage:\n\tiohyve $1 [-d]\n"
	fi
}

# Create guest
__create() {
	if [ -z $2 ] || [ -z $3 ]; then
		printf "usage:\n\tiohyve $1 <name> <size>\n"
		return
	fi
	local name="$2"
	local pool="${4-$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)}"
	if zfs list -H -o name $pool/iohyve/$name > /dev/null 2>&1; then
		echo "cannot create '$name': guest already exists"
		return
	fi
	local size="$3"
	local description="$(date)"
	local guestlist="$(zfs list -H -o name -t volume | grep iohyve | cut -d'/' -f1-3)"
	listtaps(){
		for i in $guestlist ; do
			local tapprop="$(zfs get -H -o value iohyve:tap $i)"
			printf $tapprop'\n'
		done
	}
	local taplast="$(listtaps | sort -V | cut -c4- | tail -n1)"
	if [ -z $taplast ]; then
		local tap='0'
	else
		local tap="$(expr $taplast + 1)"
	fi
	listcons(){
		for i in $guestlist ; do
			local conprop="$(zfs get -H -o value iohyve:con $i)"
			printf $conprop'\n'
		done
	}
	local conlast="$(listcons | sort -V | cut -c5- | tail -n1)"
	if [ -z $conlast ]; then
		local con='0'
	else
		local con="$(expr $conlast + 1)"
	fi
	printf "creating '$name': "
	zfs create $pool/iohyve/$name
	zfs create -V $size -o volmode=dev $pool/iohyve/$name/disk0
	zfs set iohyve:name=$name $pool/iohyve/$name
	zfs set iohyve:size=$size $pool/iohyve/$name
	zfs set iohyve:ram=256M $pool/iohyve/$name
	zfs set iohyve:cpu=1 $pool/iohyve/$name
	zfs set iohyve:tap=tap$tap $pool/iohyve/$name
	zfs set iohyve:con=nmdm$con $pool/iohyve/$name
	zfs set iohyve:persist=1 $pool/iohyve/$name
	zfs set iohyve:boot=0 $pool/iohyve/$name
	zfs set iohyve:loader=bhyveload $pool/iohyve/$name
	zfs set iohyve:os=default $pool/iohyve/$name
	zfs set "iohyve:description=$description" $pool/iohyve/$name
	zfs set iohyve:bargs=-A_-H_-P $pool/iohyve/$name
	printf "done\n"
}

# Install guest
__install() {
	if [ -z $2 ] || [ -z $3 ]; then
		printf "usage\n\tiohyve $1 <name> <iso>\n"
		return
	fi
	local name="$2"
	local iso="$3"
	local pool="$(zfs list -H -t volume -o name | grep $name | grep disk0 | cut -d '/' -f1)"
	local dataset="$(zfs list -H -t volume | grep $name | cut -d '/' -f 1-3 | head -n1)"
	# Check if guest exists
	if [ -d /iohyve/$pool/$name ] || [ -d /iohyve/$name ]; then
		# Check to make sure guest isn't running
		local running=$(pgrep -fx "bhyve: ioh-$name")
		if [ -z $running ]; then
			local ram="$(zfs get -H -o value iohyve:ram $dataset)"
			local con="$(zfs get -H -o value iohyve:con $dataset)"
			local cpu="$(zfs get -H -o value iohyve:cpu $dataset)"
			local bargexist="$(zfs get -H -o value iohyve:bargs $dataset)"
			local bargs="$(echo $bargexist | sed -e 's/_/ /g')"
			printf "installing '$name'"
			# Set install prop
			zfs set iohyve:install=yes $pool/iohyve/$name
			# Load from CD
			__load "$name" "/iohyve/ISO/$iso/$iso"
			# Prepare and start guest
			pci="$(__prepare_guest $name) ahci-cd,/iohyve/ISO/$iso/$iso"
			local pci_args=$(__get_bhyve_cmd "$pci" )
			bhyve -c $cpu $bargs -m $ram $pci_args -lcom1,/dev/${con}A ioh-$name &
			printf "done\n"
		else
			echo "$name is already running."
		fi
	else
		echo "cannot install '$name': guest does not exist"
	fi
}

# Load guest
__load() {
	if [ -z $1 ] || [ -z $2 ]; then
		printf "usage:\n\tiohyve load <name> <path-to-bootdisk>\n"
		return
	fi
	local name="$1"
	local media="$2"
	local disk="${3-$(zfs list -H -t volume -o name | grep $name | grep disk0 | head -n1)}"
	local dataset="$(zfs list -H -t volume -o name | grep $name | grep disk0 | cut -d '/' -f 1-3 | head -n1)"
	local ram="$(zfs get -H -o value iohyve:ram $dataset)"
	local con="$(zfs get -H -o value iohyve:con $dataset)"
	local loader="$(zfs get -H -o value iohyve:loader $dataset)"
	local install="$(zfs get -H -o value iohyve:install $dataset)"
	local os="$(zfs get -H -o value iohyve:os $dataset)"
	local autogrub="$(zfs get -H -o value iohyve:autogrub $dataset)"
	local bargexist="$(zfs get -H -o value iohyve:bargs $dataset)"
	local bargs="$(echo $bargexist | sed -e 's/_/ /g')"
	#Testing if -S is in the bargs settings. If then pass -S to bhyveload.
	local test_for_wire_memory="-S"
	case $bargs in
		*${test_for_wire_memory}*) local wire_memory="-S" ;;
		*) local wire_memory="" ;;
	esac
	if [ $loader = "grub-bhyve" ]; then
		if [ $install = "yes" ]; then
			if [ $os = "openbsd59" ]; then
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				printf 'kopenbsd -h com0 (cd0)/5.9/amd64/bsd.rd\nboot\n' > /iohyve/$name/grub.cfg
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r host -d /iohyve/$name -c /dev/${con}A -M $ram ioh-$name
			elif [ $os = "openbsd58" ]; then
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				printf 'kopenbsd -h com0 (cd0)/5.8/amd64/bsd.rd\nboot\n' > /iohyve/$name/grub.cfg
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r host -d /iohyve/$name -c /dev/${con}A -M $ram ioh-$name
			elif [ $os = "openbsd57" ]; then
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				printf 'kopenbsd -h com0 (cd0)/5.7/amd64/bsd.rd\nboot\n' > /iohyve/$name/grub.cfg
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r host -d /iohyve/$name -c /dev/${con}A -M $ram ioh-$name
			elif [ $os = "netbsd" ]; then
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				printf 'knetbsd -h -r cd0a (cd0)/netbsd\nboot\n' > /iohyve/$name/grub.cfg
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r host -d /iohyve/$name -c /dev/${con}A -M $ram ioh-$name
			elif [ $os = "debian" ]; then
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				grub-bhyve $wire_memory-m /iohyve/$name/device.map -r cd0  -c /dev/${con}A -M $ram ioh-$name
			elif [ $os = "d8lvm" ]; then
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r cd0 -c /dev/${con}A -M $ram ioh-$name
			elif [ $os = "centos6" ] || [ $os = "centos7" ]; then
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				printf 'linux (cd0)/isolinux/vmlinuz\ninitrd (cd0)/isolinux/initrd.img\nboot\n' > /iohyve/$name/grub.cfg
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r host -d /iohyve/$name -c /dev/${con}A -M $ram ioh-$name
			elif [ $os = "arch" ]; then
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				printf 'linux (cd0)/arch/boot/x86_64/vmlinuz archisobasedir=arch archisolabel=ARCH_'$(date +%Y%m)' ro\ninitrd (cd0)/arch/boot/x86_64/archiso.img\nboot\n' > /iohyve/$name/grub.cfg
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r host -d /iohyve/$name -c /dev/${con}A -M $ram ioh-$name
			elif [ $os = "custom" ]; then
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r host -d /iohyve/$name -c /dev/${con}A -M $ram ioh-$name
			else
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r cd0 -c /dev/${con}A -M $ram ioh-$name
			fi
		elif [ $install = "no" ]; then
			if [ $os = "openbsd59" ]; then
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				printf 'kopenbsd -h com0 -r sd0a (hd0,openbsd1)/bsd\nboot\n' > /iohyve/$name/grub.cfg
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r host -d /iohyve/$name -c /dev/${con}A -M $ram ioh-$name
			elif [ $os = "openbsd58" ]; then
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				printf 'kopenbsd -h com0 -r sd0a (hd0,openbsd1)/bsd\nboot\n' > /iohyve/$name/grub.cfg
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r host -d /iohyve/$name -c /dev/${con}A -M $ram ioh-$name
			elif [ $os = "openbsd57" ]; then
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				printf 'kopenbsd -h com0 -r sd0a (hd0,openbsd1)/bsd\nboot\n' > /iohyve/$name/grub.cfg
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r host -d /iohyve/$name -c /dev/${con}A -M $ram ioh-$name
			elif [ $os = "netbsd" ]; then
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				printf 'knetbsd -h -r wd0a (hd0,msdos1)/netbsd\nboot\n' > /iohyve/$name/grub.cfg
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r host -d /iohyve/$name -c /dev/${con}A -M $ram ioh-$name
			elif [ $os = "debian" ]; then
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r hd0,msdos1 -c /dev/${con}A -M $ram ioh-$name
			elif [ $os = "d8lvm" ]; then
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r hd0,msdos1 -d /grub -c /dev/${con}A -M $ram ioh-$name
			elif [ $os = "centos6" ]; then
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r hd0,msdos1 -d /grub -c /dev/${con}A -M $ram ioh-$name
			elif [ $os = "centos7" ]; then
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r hd0,msdos1 -d /grub2 -c /dev/${con}A -M $ram ioh-$name
			elif [ $os = "custom" ]; then
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r host -d /iohyve/$name -c /dev/${con}A -M $ram ioh-$name
			else
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r hd0,msdos1 -c /dev/${con}A -M $ram ioh-$name
			fi
		fi
	else
		bhyveload $wire_memory -m $ram -d $media -c /dev/${con}A ioh-$name
	fi
}

# Boot guest
__boot() {
	if [ -z $1 ]; then
		printf "usage:\n\tiohyve boot <name> [runmode] [pcidevices]\n"
		return
	fi
	local name="$1"
	# runmode (runonce/persist)
	#   0 = once
	#   1 = persist regular (stop if guest is powering off)
	#   2 = always persist (start again even if guest is powering off)
	local runmode="$2"
	local pci="$3"
	local dataset="$(zfs list -H -t volume | grep $name | grep disk0 | cut -d '/' -f 1-3 | head -n1)"
	if [ -z $dataset ]; then
		echo "cannot boot '$name': guest does not exist"
		return
	fi
	local ram="$(zfs get -H -o value iohyve:ram $dataset)"
	local con="$(zfs get -H -o value iohyve:con $dataset)"
	local cpu="$(zfs get -H -o value iohyve:cpu $dataset)"
	local persist="$(zfs get -H -o value iohyve:persist $dataset)"
	local bargexist="$(zfs get -H -o value iohyve:bargs $dataset)"
	local bargs="$(echo $bargexist | sed -e 's/_/ /g')"
	# Set install prop
	zfs set iohyve:install=no $dataset
	# Generate list of bhyve -s commands for all devices
	local pci_args=$(__get_bhyve_cmd "$pci" )
	# Handle the starting of the guest inside a spawned subshell so the guest
	# can be restarted automatically if the guest reboots or crashes
	local runstate="1"
	(
		while [ $runstate = "1" ]
		do
			__load "$name" "/dev/zvol/$dataset/disk0"
			bhyve -c $cpu $bargs -m $ram $pci_args -lcom1,/dev/${con}A ioh-$name &
			local vmpid=$!
			wait $vmpid
			vmrc=$?
			sleep 5
			if [ $runmode == "0" ]; then
				runstate="0"
			elif [ $vmrc == "1" ] && [ $runmode != 2 ]; then
				# VM has been powered off
				runstate="0"
			else
				if [ $(zfs get -H -o value iohyve:persist $dataset) != 1 ]; then
					runstate="0"
				fi
			fi
		done
		bhyvectl --destroy --vm=ioh-$name
		# Resetting the flag so that a vm which we stopped by abusing zfs set/get
		# as as an IPC mechanism is persistent again next time we start it
		if [ ! -z $persist ]; then
			zfs set iohyve:persist="$persist" $dataset
		fi
	) &
}

__prepare_guest() {
	local name="$1"
	local dataset="$(zfs list -H -t volume | grep $name | grep disk0 | cut -d '/' -f 1-3 | head -n1)"
	local pci="$(__get_zfs_pcidev_conf $dataset)"
	# Setup tap if needed
	local listtap="$(zfs get -H -o value iohyve:tap $dataset)"
	for tap in $(echo $listtap | sed -n 1'p' | tr ',' '\n'); do
		if [ $tap ] && [ $tap != "-" ]; then
			local tapif="$(ifconfig -l | tr ' ' '\n' | grep -F -w $tap)"
			if [ -z $tapif ]; then
				# create tap interface
				ifconfig $tap create descr "iohyve-$name"
				ifconfig bridge0 addm $tap
			fi
			# Add a virtio-net pci device for the tap
			local mac="$(zfs get -H -o value iohyve:mac_$tap $dataset)"
			if [ $mac = "-" ]; then
				pci="$pci virtio-net,$tap"
			else
				pci="$pci virtio-net,${tap},mac=${mac}"
			fi
		fi
        done
	#Add disk as second PCI device
	pci="ahci-hd,/dev/zvol/$dataset/disk0 $pci"
	#Add Hostbridge and lpc as the first PCI devices
	pci="hostbridge lpc $pci"
	# return the list of pci devices
	echo $pci
}

# Start guest (combine load and boot)
__start() {
	if [ -z $2 ]; then
		printf "usage:\n\tiohyve $1 <name> [-s | -a]\n"
		return 1
	fi
	local name="$2"
	local flag="$3"
	local pci=""
	local runmode="1"
	local pool="$(zfs list -H -t volume -o name | grep $name| grep disk0 | cut -d '/' -f1)"
	local dataset="$(zfs list -H -t volume -o name | grep $name | grep disk0 | cut -d '/' -f 1-3 | head -n1)"
	local loader="$(zfs get -H -o value iohyve:loader $dataset)"

	if ! zfs list -H -o name $pool/iohyve/$name > /dev/null 2>&1; then
		echo "cannot start '$name': guest does not exists"
		return
	fi

	# Check if loader is UEFI
	if [ $loader = "uefi" ]; then
		__uefi "$name" "null.iso"
	fi
	# Check if guest exists
	if [ -d /iohyve/$pool/$name ] || [ -d /iohyve/$name ]; then
		# Check to make sure guest isn't running
		local running=$(pgrep -fx "bhyve: ioh-$name")
		if [ -z $running ]; then
			case "$flag" in
				-s)	runmode="0"	# single - start only once
					;;
				-a) 	runmode="2"	# always - persist regardless what
					;;
				*)	runmode="1"	# persist - persists until guest is powering off
					;;
			esac
			echo "Starting $name... (Takes 15 seconds for FreeBSD guests)"
			# Prepare and boot guest
			pci="$(__prepare_guest $name)"
			__boot "$name" "$runmode" "$pci"
		else
			echo "$name is already running."
		fi
	else
		echo "Not a valid guest name"
	fi
}

# Start a UEFI enabled bhyve instance.
# This is experimental, use with caution.
__uefi() {
	if [ -z $2 ] || [ -z $3 ]; then
		printf "usage:\n\tiohyve $1 <name> <iso>\n"
		return 1
	fi
	local name="$2"
	local media="$3"
	local dataset="$(zfs list -H -t volume | grep $name | cut -d '/' -f 1-3 | head -n1)"
	if [ -z $dataset ]; then
		echo "cannot start '$name': guest does not exists"
		return 1
	fi
	local ram="$(zfs get -H -o value iohyve:ram $dataset)"
	local con="$(zfs get -H -o value iohyve:con $dataset)"
	local cpu="$(zfs get -H -o value iohyve:cpu $dataset)"
	local fw="$(zfs get -H -o value iohyve:fw $dataset)"
	local tap="$(zfs get -H -o value iohyve:tap $dataset)"
	local bargs="$(zfs get -H -o value iohyve:bargs $dataset | sed -e 's/_/ /g')"
	local pool="$(zfs list -H -t volume -o name | grep $name | cut -d '/' -f1)"
	# Create tap if needed
	# check to see if tap is already created before attempting to create new tap interface
	local tapif="$(ifconfig -l | tr ' ' '\n' | grep -F -w $tap)"
	if [ -z $tapif ]; then
		# create tap interface
		ifconfig $tap create descr "iohyve-$name"
		ifconfig bridge0 addm $tap
	fi
	# Make sure everything is in order...
	if [ $fw = '-' ]; then
		echo "cannot start '$name': firmware has to be set for uefi boot"
		return 1
	fi
	#if [ -z $media ]; then
	#	echo "You must enter at least a zero byte ISO for some OSs..."
	#	echo "EX: iohyve uefi winguest null.iso"
	#fi
	# Check if guest exists
	if [ -d /iohyve/$pool/$name ] || [ -d /iohyve/$name ]; then
		# Check to make sure guest isn't running
		local running=$(pgrep -fx "bhyve: ioh-$name")
		if [ -z $running ]; then
			# The good stuff...
			bhyve -c $cpu $bargs -m $ram \
			        -s 0,hostbridge \
			        -s 3,ahci-cd,/iohyve/ISO/$media/$media \
			        -s 4,ahci-hd,/dev/zvol/$dataset/disk0,sectorsize=512 \
			        -s 10,virtio-net,$tap \
			        -s 31,lpc \
			        -l com1,/dev/${con}A \
			        -l bootrom,/iohyve/Firmware/$fw/$fw \
			        ioh-$name &
		else
			echo "cannot start '$name': guest is already running"
		fi
	else
		echo "cannot start '$name': guest does not exist"
	fi
}

# Gracefully stop a guest
__stop() {
	if [ -z $2 ]; then
		printf "usage:\n\tiohyve $1 <name>\n"
		return 1
	fi
	local name="$2"
	local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
	local pid=$(pgrep -fx "bhyve: ioh-$name")
#	zfs set iohyve:persist=0 $pool/iohyve/$name
	if [ -z $pid ]; then
		echo "cannot stop '$name': guest is not running"
	else
		printf "stopping $name: "
		kill $pid
		printf "done\n"
	fi
#	sleep 20
#	bhyvectl --destroy --vm=ioh-$name
}

# Force kill -9 everyting matching $name and destroy
# THIS WILL KILL EVERYTHING MATCHING $NAME
__forcekill() {
	if [ -z $2 ]; then
		printf "usage:\n\tiohyve $1 <name>\n"
		return 1
	fi
	local name="$2"
	local pids="$(pgrep -f $name)"
	for apid in "$pids"; do
		kill -9 $apid
	done
	bhyvectl --destroy --vm=ioh-$name
}

# Gracefully shut down all guests via ACPI (Does not destroy)
__scram() {
	echo "shutting down all guests: "
	local pids="$(pgrep -f ioh-)"
	local procs="$(pgrep -l -f ioh-)"
	for proc in "$procs"; do
		local pid="$(pgrep -l -f ioh- | cut -f1 -d' ')"
		local name="$(pgrep -l -f ioh- | cut -f2 -d-)"
		printf "shutting '$name' down: "
		kill $pid
		printf "done\n"
	done
	#local pids="$(pgrep -f ioh-)"
	#for apid in "$pids"; do
	#	kill $apid
	#done
	#wait_for_pids $pids # Error: /usr/local/sbin/iohyve: wait_for_pids: not found
}

# Destroy guest
__destroy() {
	if [ -z $2 ]; then
		printf "usage:\n\tiohyve $1 <name>\n"
		return 1
	fi
	local name="$2"
	local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n1)"
	printf "destroying '$name': "
#	zfs set iohyve:persist=0 $pool/iohyve/$name
	bhyvectl --force-poweroff --vm=ioh-$name
	bhyvectl --destroy --vm=ioh-$name
	printf "done\n"
}

# Rename the guest
__rename() {
	if [ -z $2 ] || [ -z $3 ]; then
		printf "usage:\n\tiohyve $1 <name> <newname>\n"
		return 1
	fi
	local name="$2"
	local newname="$3"
	local pool="$(zfs list -H -t volume | grep $name | cut -d '/' -f 1 | head -n1)"
	if ! zfs list -H -o name $pool/iohyve/$name > /dev/null 2>&1; then
		echo "cannot rename '$name': guest does not exist"
		return
	fi
	printf "renaming '$name' to '$newname': "
	zfs rename -f $pool/iohyve/$name $pool/iohyve/$newname
	zfs set iohyve:name=$newname $pool/iohyve/$newname
	printf "done\n"
}

# Delete guest
__delete() {
	local flagone="$2"
	local flagtwo="$3"
	if [ $flagone = "-f" ]; then
		if [ -z $flagtwo ]; then
			printf "usage:\n\tiohyve $1 [-d] <name>\n"
			return 1
		fi
		local target_dataset="$(zfs list -H -t filesystem -o name | grep iohyve | grep -v "/ISO/" | grep -v "Firmware" | grep $flagtwo | head -n1)"
		if [ -z $target_dataset ]; then
			echo "cannot delete '$flagtwo': guest does not exist"
			return
		fi
		echo ""
		echo "[WARNING] Forcing permanent deletion of $flagtwo"
		echo "Location: $target_dataset including children and clones"
		echo ""
		echo "Hit Ctrl+C in the next 10 seconds to cancel..."
		sleep 10
		echo "Deleting $flagtwo at $target_dataset..."
		zfs destroy -rR $target_dataset
	else
		if [ -z $flagone ]; then
			printf "usage:\n\tiohyve $1 [-d] <name>\n"
			return
		fi
		local target_dataset="$(zfs list -H -t filesystem -o name | grep iohyve | grep -v "/ISO/" | grep -v "Firmware" | grep $flagone | head -n1)"
		if [ -z $target_dataset ]; then
			echo "cannot delete '$flagone': guest does not exist"
			return
		fi
		echo ""
		echo "[WARNING] Are you sure you want to permanently delete $flagone and all child datasets?"
		read -p "Location: $target_dataset [y/N]? " an </dev/tty
		case "$an" in
			y|Y) printf "deleting '$flagone' ($target_dataset): "; zfs destroy -r $target_dataset; printf "done\n"
 			;;
			*) echo "did not delete '$flagone': user canceled deletion"
		esac
	fi
}

# Export Guest
__exportguest() {
	if [ -z $2 ]; then
		printf "usage:\n\tiohyve $1 <name>\n"
		return 1
	fi
	local name="$2"
	local pool="$(zfs list -H -t volume | grep $name | grep disk0 | cut -d '/' -f 1 | head -n1)"
	local disklist="$(zfs list -H | grep iohyve | grep $name | grep disk | \
				cut -f1 | cut -d '/' -f4-)"
	# Check if guest exists
	echo "Exporting $name. Note this may take some time depending on the size."
	if [ -d /iohyve/$pool/$name ] || [ -d /iohyve/$name ]; then
		# Check to make sure guest isn't running
		local running=$(pgrep -fx "bhyve: ioh-$name")
		if [ -z $running ]; then
			# Create /tmp/iohyve/$name
			echo "Creating temp directory..."
			mkdir -p /tmp/iohyve/$name
			# Export Properties to file
			echo "Exporting properties..."
			zfs get -H -o property,value all $pool/iohyve/$name | grep iohyve: | sort | \
				sed -e 's/iohyve://g' | sed -e 's/	/=/g' > /tmp/iohyve/$name/properties.ucl
			# Write disks to file
			echo "Exporting disks..."
			for disk in $disklist ; do
				dd if=/dev/zvol/$pool/iohyve/$name/$disk of=/tmp/iohyve/$name/${disk}.img bs=1M
			done
			# Compress and add to archive
			echo "Compressing to archive..."
			tar -czf /iohyve/$name/$name.tar.gz -C /tmp/iohyve/$name/ .
			# Remove /tmp/iohyve/
			echo "Removing temp directory..."
			rm -fr /tmp/iohyve
		else
			echo "cannot export '$name': guest still running"
		fi
	else
		echo "cannot export '$name': guest does not exist"
		return 1
	fi
}

__get_bhyve_cmd() {
	local devices="$1"
	local pci_slot_count=0
	for device in $devices ; do
		echo "-s $pci_slot_count,$device"
		pci_slot_count=$(( pci_slot_count + 1 ))
	done
}


